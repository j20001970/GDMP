diff --git a/WORKSPACE b/WORKSPACE
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -524,8 +560,8 @@ http_archive(
 http_archive(
     name = "opencv",
     build_file_content = all_content,
-    strip_prefix = "opencv-3.4.11",
-    urls = ["https://github.com/opencv/opencv/archive/3.4.11.tar.gz"],
+    strip_prefix = "opencv-4.11.0",
+    urls = ["https://github.com/opencv/opencv/archive/4.11.0.tar.gz"],
 )
 
 new_local_repository(
diff --git a/third_party/BUILD b/third_party/BUILD
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -188,12 +188,6 @@ bzl_library(
 # linker, so if library A depends on library B, library B must come _after_.
 # Hence core is at the bottom.
 OPENCV_MODULES = [
-    "calib3d",
-    "features2d",
-    "highgui",
-    "video",
-    "videoio",
-    "imgcodecs",
     "imgproc",
     "core",
 ]
@@ -202,9 +196,10 @@ OPENCV_MODULES = [
 # still only builds the shared libraries, so we have to choose one or the
 # other. We build shared libraries by default, but this variable can be used
 # to switch to static libraries.
-OPENCV_SHARED_LIBS = True
+OPENCV_SHARED_LIBS = False
 
-OPENCV_SO_VERSION = "3.4"
+OPENCV_SO_VERSION = "411"
+OPENCV_DLL_VERSION = "4110"
 
 cmake(
     name = "opencv_cmake",
@@ -219,11 +214,12 @@ cmake(
         "BUILD_PERF_TESTS": "OFF",
         "BUILD_EXAMPLES": "OFF",
         "BUILD_SHARED_LIBS": "ON" if OPENCV_SHARED_LIBS else "OFF",
+        "WITH_IPP": "OFF",
         "WITH_ITT": "OFF",
         "WITH_JASPER": "OFF",
-        "WITH_JPEG": "ON",
-        "WITH_PNG": "ON",
-        "WITH_TIFF": "ON",
+        "WITH_JPEG": "OFF",
+        "WITH_PNG": "OFF",
+        "WITH_TIFF": "OFF",
         "WITH_OPENCL": "OFF",
         "WITH_WEBP": "OFF",
         # Optimization flags
@@ -252,48 +248,62 @@ cmake(
         # ccache would be able to work across sandboxed Bazel builds, either.
         # In any case, Bazel does its own caching of the rule's outputs.
         "ENABLE_CCACHE": "OFF",
-    },
+    } | select({
+        "@platforms//os:windows": {
+            "BUILD_SHARED_LIBS": "ON",
+            "OPENCV_SKIP_VISIBILITY_HIDDEN": "ON",
+            "OPENCV_BIN_INSTALL_PATH": "bin",
+            "OPENCV_LIB_INSTALL_PATH": "lib",
+        },
+        "@platforms//os:emscripten": {
+            "CPU_BASELINE": "''",
+            "CPU_DISPATCH": "''",
+            "BUILD_opencv_apps": "OFF",
+            "WITH_VA": "OFF",
+        },
+        "//conditions:default": {
+            "CMAKE_INSTALL_LIBDIR": "lib",
+        },
+    }),
     lib_source = "@opencv//:all",
-    linkopts = [] if OPENCV_SHARED_LIBS else [
-        # When using static libraries, the binary that eventually depends on the
-        # libraries also needs to link in their dependencies, which therefore
-        # have to be listed here.
-        # This list depends on which dependencies CMake finds when it configures
-        # the build, and so depends on what is installed on the local system.
-        # After building, the linkopts for the current setup can be extracted
-        # from lib/pkgconfig/opencv.pc in bazel-out
-        "-ljpeg",
-        "-lpng",
-        "-lz",
-        "-ltiff",
-        "-lImath",
-        "-lIlmImf",
-        "-lIex",
-        "-lHalf",
-        "-lIlmThread",
-        "-ldc1394",
-        "-lavcodec",
-        "-lavformat",
-        "-lavutil",
-        "-lswscale",
-        "-lavresample",
-        "-ldl",
-        "-lm",
-        "-lpthread",
-        "-lrt",
-    ],
+    copts = select({
+        "@platforms//os:emscripten": [
+            "-sDISABLE_EXCEPTION_CATCHING=1",
+            "-fexceptions",
+            "-msimd128",
+        ],
+        "//conditions:default": None,
+    }),
+    linkopts = select({
+        "@platforms//os:emscripten": [
+            "--oformat=wasm",
+        ],
+        "//conditions:default": None,
+    }),
+    out_include_dir = select({
+        "@platforms//os:windows": "include",
+        "//conditions:default": "include/opencv4",
+    }),
     out_shared_libs = select({
         "@bazel_tools//src/conditions:darwin": ["libopencv_%s.%s.dylib" % (module, OPENCV_SO_VERSION) for module in OPENCV_MODULES],
+        "@platforms//os:emscripten": None,
+        "@platforms//os:windows": ["opencv_%s%s.dll" % (module, OPENCV_DLL_VERSION) for module in OPENCV_MODULES],
         # Only the shared objects listed here will be linked in the directory
         # that Bazel adds to the RUNPATH of dependent executables. You cannot
         # list both the versioned and unversioned name of the .so, and the
         # versioned name is the one that the executables actually reference.
         "//conditions:default": ["libopencv_%s.so.%s" % (module, OPENCV_SO_VERSION) for module in OPENCV_MODULES],
     }) if OPENCV_SHARED_LIBS else None,
-    out_static_libs = [
-        "libopencv_%s.a" % module
-        for module in OPENCV_MODULES
-    ] if not OPENCV_SHARED_LIBS else None,
+    out_static_libs = select({
+        "@platforms//os:windows": [
+            "opencv_%s%s.lib" % (module, OPENCV_DLL_VERSION)
+            for module in OPENCV_MODULES
+        ],
+        "//conditions:default": [
+            "libopencv_%s.a" % module
+            for module in OPENCV_MODULES
+        ] if not OPENCV_SHARED_LIBS else None,
+    }),
 )
 
 alias(
