diff --git a/WORKSPACE b/WORKSPACE
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -524,8 +560,8 @@ http_archive(
 http_archive(
     name = "opencv",
     build_file_content = all_content,
-    strip_prefix = "opencv-3.4.11",
-    urls = ["https://github.com/opencv/opencv/archive/3.4.11.tar.gz"],
+    strip_prefix = "opencv-4.11.0",
+    urls = ["https://github.com/opencv/opencv/archive/4.11.0.tar.gz"],
 )
 
 new_local_repository(
diff --git a/third_party/BUILD b/third_party/BUILD
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -188,12 +188,6 @@ bzl_library(
 # linker, so if library A depends on library B, library B must come _after_.
 # Hence core is at the bottom.
 OPENCV_MODULES = [
-    "calib3d",
-    "features2d",
-    "highgui",
-    "video",
-    "videoio",
-    "imgcodecs",
     "imgproc",
     "core",
 ]
@@ -204,7 +198,8 @@ OPENCV_MODULES = [
 # to switch to static libraries.
 OPENCV_SHARED_LIBS = True
 
-OPENCV_SO_VERSION = "3.4"
+OPENCV_SO_VERSION = "411"
+OPENCV_DLL_VERSION = "4110"
 
 cmake(
     name = "opencv_cmake",
@@ -212,6 +207,7 @@ cmake(
     # here are serving to provide some CMake script configuration options
     cache_entries = {
         "CMAKE_BUILD_TYPE": "Release",
+        "CMAKE_INSTALL_LIBDIR": "lib",
         # The module list is always sorted alphabetically so that we do not
         # cause a rebuild when changing the link order.
         "BUILD_LIST": ",".join(sorted(OPENCV_MODULES)),
@@ -231,6 +227,8 @@ cmake(
         "WITH_EIGEN": "ON",
         "WITH_PTHREADS": "ON",
         "WITH_PTHREADS_PF": "ON",
+        "OPENCV_BIN_INSTALL_PATH": "bin",
+        "OPENCV_LIB_INSTALL_PATH": "lib",
         # When building tests, by default Bazel builds them in dynamic mode.
         # See https://docs.bazel.build/versions/master/be/c-cpp.html#cc_binary.linkstatic
         # For example, when building //mediapipe/calculators/video:opencv_video_encoder_calculator_test,
@@ -282,18 +280,29 @@ cmake(
         "-lpthread",
         "-lrt",
     ],
+    out_include_dir = select({
+        "@bazel_tools//src/conditions:windows": "include",
+        "//conditions:default": "include/opencv4",
+    }),
     out_shared_libs = select({
         "@bazel_tools//src/conditions:darwin": ["libopencv_%s.%s.dylib" % (module, OPENCV_SO_VERSION) for module in OPENCV_MODULES],
+        "@bazel_tools//src/conditions:windows": ["opencv_%s%s.dll" % (module, OPENCV_DLL_VERSION) for module in OPENCV_MODULES],
         # Only the shared objects listed here will be linked in the directory
         # that Bazel adds to the RUNPATH of dependent executables. You cannot
         # list both the versioned and unversioned name of the .so, and the
         # versioned name is the one that the executables actually reference.
         "//conditions:default": ["libopencv_%s.so.%s" % (module, OPENCV_SO_VERSION) for module in OPENCV_MODULES],
     }) if OPENCV_SHARED_LIBS else None,
-    out_static_libs = [
-        "libopencv_%s.a" % module
-        for module in OPENCV_MODULES
-    ] if not OPENCV_SHARED_LIBS else None,
+    out_static_libs = select({
+        "@bazel_tools//src/conditions:windows": [
+            "opencv_%s%s.lib" % (module, OPENCV_DLL_VERSION)
+            for module in OPENCV_MODULES
+        ],
+        "//conditions:default": [
+            "libopencv_%s.a" % module
+            for module in OPENCV_MODULES
+        ] if not OPENCV_SHARED_LIBS else None,
+    }),
 )
 
 alias(
